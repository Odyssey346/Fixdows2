<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AppDisplayName" xml:space="preserve">
    <value>Fixdows</value>
    <comment>DisplayName of app (title)</comment>
  </data>
  <data name="AppDescription" xml:space="preserve">
    <value>Fixdows allows you to Fix your Dows</value>
    <comment>Description of app</comment>
  </data>
  <data name="Shell_Main.Content" xml:space="preserve">
    <value>Welcome to Fixdows</value>
    <comment>Header in MainPage</comment>
  </data>
  <data name="Shell_Core.Content" xml:space="preserve">
    <value>Core</value>
    <comment>Header in CorePage</comment>
  </data>
  <data name="Shell_About.Content" xml:space="preserve">
    <value>About</value>
    <comment>Header in AboutPage</comment>
  </data>
  <data name="MainPageWelcomeText.Text" xml:space="preserve">
    <value>Welcome to Fixdows. If you are having issues with things like Windows Update or you are running out of storage, you have come to the right place. Try going to the "Core" menu in the sidebar and see if there's something you'd like to try!</value>
    <comment>A text after the header in MainPage that tries to welcome the user.</comment>
  </data>
  <data name="CoreInfo.Text" xml:space="preserve">
    <value>In Core you can find everything you need to try fix the core problems of everything. Things like repairing Windows image, checking integrity of system files etc are here.</value>
    <comment>Informational text in CorePage</comment>
  </data>
  <data name="MSResetDescription.Text" xml:space="preserve">
    <value>The Microsoft Store Reset feature of Fixdows allows you to reset Microsoft Store. Useful if you're having issues with downloading apps or similar.</value>
    <comment>A text after the header in MSResetPage that explains what MSResetPage is all about</comment>
  </data>
  <data name="Shell_MSReset.Content" xml:space="preserve">
    <value>Microsoft Store Reset</value>
    <comment>Header in MSResetPage</comment>
  </data>
  <data name="TheClassicDescription.Text" xml:space="preserve">
    <value>Repair Windows Image is internally called "The Classic" for a reason. If you've ever looked at the Microsoft Community support forums, I'm sure you've seen someone say "run these two commands and mark resolved" or something like that. Well, this Fixdows feature runs those commands! All with the click of a button, which is easier than typing a bunch of commands. So relax. Press the button and let Fixdows do the scary command line stuff for you.</value>
    <comment>A text after the header in TheClassicPage that explains what TheClassicPage is all about</comment>
  </data>
  <data name="Shell_ClassicPage.Content" xml:space="preserve">
    <value>Repair Windows Image</value>
    <comment>Header in TheClassicPage</comment>
  </data>
  <data name="PrinterDescription.Text" xml:space="preserve">
    <value>Printers. A big source of frustration for many. Well, if you're having issues with print jobs. try running this repair tool! It will clear the printer spool for you.</value>
  </data>
  <data name="Shell_PrinterPage.Content" xml:space="preserve">
    <value>Printer Spool Restart</value>
    <comment>Header in PrinterPage</comment>
  </data>
  <data name="Shell_UpdateResetPage.Content" xml:space="preserve">
    <value>Reset Windows Update</value>
    <comment>Header in UpdateResetPage</comment>
  </data>
  <data name="UpdateResetDescription.Text" xml:space="preserve">
    <value>Look, Windows Update, whether you like it or not, might break. Computers aren't bug free. Well, if it breaks, or it's slow, try this! Maybe you can finally get that Insiders update you've been missing out on? 🤔</value>
    <comment>Explains what UpdateResetPage is all about</comment>
  </data>
  <data name="DiskCleanupDescription.Text" xml:space="preserve">
    <value>I'd like to make my own disk cleanup tool just for fun, but Windows comes with one that's pretty great. Try running this if you're starting to run out of storage!</value>
    <comment>Explains what DiskCleanupPage is all about</comment>
  </data>
  <data name="Shell_DiskCleanupPage.Content" xml:space="preserve">
    <value>Disk Cleanup</value>
    <comment>Header in DiskCleanupPage</comment>
  </data>
</root>